//一般做法1
int tmp = x;
x = y;
y = tmp;

//做法2
x = x + y;
y = x - y;
x = x - y;

//位运算
x = x ^ y // (1)
y = x ^ y // (2)
x = x ^ y // (3)

/*
    两个相同的数异或之后结果会等于0，即 n ^ n = 0
    并且任何数与0异或等于它本身，即n ^ 0 = n
    所以，解释如下：
    
    把(1)中的x带入(2)中的x，有
    y = x ^ y = (x ^ y) ^ y = x ^ (y ^ y) = x ^ 0 = x //x的值赋给了y
    
    对于(3),推导如下：
    x = x ^ y = x ^ (x ^ y) = (x ^ x) ^ y = 0 ^ y = y //y的值赋给了x
    
    注意，异或运算支持运算的交换律与结合律
*/